
type Query { 
  allTodoLists:[TodoList]
  todoList(id: String): TodoList
}

type Mutation  {
   removeTodoItem(input: RemoveTodoItemInput!): RemoveTodoItemPayload
   addTodoItem(input: AddTodoItemInput!): AddTodoItemPayload
   removeCompleted(id: String!): RemoveCompletedPayload
   setTodoItemDescription(input: SetTodoItemDescriptionInput!): SetTodoItemDescriptionPayload
   checkTodoItem(input: CheckTodoItemInput!): CheckTodoItemPayload
   checkAllTodoItems(input: CheckAllTodoItemsInput!): CheckAllTodoItemsPayload
}


type TodoList {
  id: ID!
  version: Int
  items: [Item]
  createdAt: String
  updatedAt: String
}


type Item {
    id: Int!
    desc: String
    completed: Boolean
    todoList: TodoList
}

input RemoveTodoItemInput {
  id: String!
  item_id: Int! 
}

type RemoveTodoItemPayload {
  id: String!
  item_id: Int!
}

type RemoveCompletedPayload {
  id: String
}


input AddTodoItemInput {
  id: String!
  desc: String!
}

type AddTodoItemPayload {
  id: String!
  desc: String! 
}

input SetTodoItemDescriptionInput {
  id: String!
  item_id: Int!
  desc: String!
}

type SetTodoItemDescriptionPayload {
  id: String!
  item_id: Int!
  desc: String!
}

input CheckTodoItemInput {
  id: String!
  item_id: Int!
  checked: Boolean!
} 

type CheckTodoItemPayload{
  id: String!
  item_id: Int!
  checked: Boolean!
}

input CheckAllTodoItemsInput {
  id: String!
  checked: Boolean!
}

type CheckAllTodoItemsPayload {
  id: String!
  checked: Boolean!
}
