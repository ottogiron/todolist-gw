
type Query { 
  allTodos:[Todo]
  todo(id: String): Todo
}

type Mutation {
  addTodo(input: AddTodoInput!): AddTodoPayload
  removeTodo(input: RemoveTodoInput!): RemoveTodoPayload
  renameTodo(input: RenameTodoInput!): RenameTodoPayload
}

type Todo {
  id: String
  version: Int
  items: [Item]
  createdAt: String
  updatedAt: String
}


type Item {
    id: Int
    desc: String
    completed: Boolean
    todo: Todo
}


input AddTodoInput {
  text: String!
  clientMutationId: String
}

type AddTodoPayload {
  todoEdge: TodoEdge

  clientMutationId: String
}

input RemoveTodoInput {
  id: ID!
  clientMutationId: String
}

type RemoveTodoPayload {
  deletedTodoId: ID
  clientMutationId: String
}

input RenameTodoInput {
  id: ID!
  text: String!
  clientMutationId: String
}

type RenameTodoPayload {
  todo: Todo
  clientMutationId: String
}


type TodoEdge {

  node: Todo


  cursor: String!
}




